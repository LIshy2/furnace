module torus where
{
  import sigma;
  import circle data Torus = ptT | pathOneT < i > [(i = 0) -> ptT, (i = 1) -> ptT] | pathTwoT < i > [(i = 0) -> ptT, (i = 1) -> ptT] | squareT < i j > [(i = 0) -> pathOneT
  {
    Torus
  }
  @ j, (i = 1) -> pathOneT
  {
    Torus
  }
  @ j, (j = 0) -> pathTwoT
  {
    Torus
  }
  @ i, (j = 1) -> pathTwoT
  {
    Torus
  }
  @ i];
  t2c : Torus -> and S1 S1 = split
  {
    ptT -> (base, base);
    pathOneT @ y -> (loop1 @ y, base);
    pathTwoT @ x -> (base, loop1 @ x);
    squareT @ x y -> (loop1 @ y, loop1 @ x)
  };
  c2t_base : S1 -> Torus = split
  {
    base -> ptT;
    loop @ x -> pathTwoT
    {
      Torus
    }
    @ x
  };
  c2t_loop' : (c : S1) -> PathP (< _ > Torus) (c2t_base c) (c2t_base c) = split
  {
    base -> < x > pathOneT
    {
      Torus
    }
    @ x;
    loop @ y -> < x > squareT
    {
      Torus
    }
    @ y @ x
  };
  c2t_loop : PathP (< _ > S1 -> Torus) c2t_base c2t_base = < y > \ (c : S1) -> c2t_loop' c @ y;
  c2t' : S1 -> S1 -> Torus = split
  {
    base -> c2t_base;
    loop @ y -> c2t_loop @ y
  };
  c2t (cs : and S1 S1) : Torus = c2t' cs .1 cs .2;
  t2c2t : (t : Torus) -> PathP (< _ > Torus) (c2t (t2c t)) t = split
  {
    ptT -> < _ > ptT;
    pathOneT @ y -> < _ > pathOneT
    {
      Torus
    }
    @ y;
    pathTwoT @ x -> < _ > pathTwoT
    {
      Torus
    }
    @ x;
    squareT @ x y -> < _ > squareT
    {
      Torus
    }
    @ x @ y
  };
  c2t2c_base : (c2 : S1) -> PathP (< _ > and S1 S1) (t2c (c2t_base c2)) (base, c2) = split
  {
    base -> < _ > (base, base);
    loop @ y -> < _ > (base, loop1 @ y)
  };
  c2t2c_loop' : (c2 : S1) -> PathP (< y > PathP (< _ > and S1 S1) (t2c (c2t_loop @ y c2)) (loop1 @ y, c2)) (c2t2c_base c2) (c2t2c_base c2) = split
  {
    base -> < y > < _ > (loop1 @ y, base);
    loop @ x -> < y > < _ > (loop1 @ y, loop1 @ x)
  };
  c2t2c : (c1 : S1) (c2 : S1) -> PathP (< _ > and S1 S1) (t2c (c2t' c1 c2)) (c1, c2) = split
  {
    base -> c2t2c_base;
    loop @ y -> \ (c : S1) -> c2t2c_loop' c @ y
  };
  S1S1equalsTorus : Path U (and S1 S1) Torus = isoPath (and S1 S1) Torus c2t t2c t2c2t rem where
  {
    rem (c : and S1 S1) : Path (and S1 S1) (t2c (c2t c)) c = c2t2c c .1 c .2
  };
  TorusEqualsS1S1 : Path U Torus (and S1 S1) = < i > S1S1equalsTorus @ - i;
  loopT : U = Path Torus ptT ptT
}
