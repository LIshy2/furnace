module interval where
{
  import equiv data I = zero | one | seg < i > [(i = 0) -> zero, (i = 1) -> one];
  fext (A B : U) (f g : A -> B) (p : (x : A) -> Path B (f x) (g x)) : Path (A -> B) f g = < j > \ (x : A) -> htpy x (seg
  {
    I
  }
  @ j) where
  {
    htpy (x : A) : I -> B = split
    {
      zero -> f x;
      one -> g x;
      seg @ i -> p x @ i
    }
  };
  toUnit : I -> Unit = split
  {
    zero -> tt;
    one -> tt;
    seg @ i -> tt
  };
  fromUnit : Unit -> I = split
  {
    tt -> zero
  };
  toUnitK : (a : Unit) -> Path Unit (toUnit (fromUnit a)) a = split
  {
    tt -> < i > tt
  };
  fromUnitK : (a : I) -> Path I (fromUnit (toUnit a)) a = split
  {
    zero -> < i > zero;
    one -> < i > seg
    {
      I
    }
    @ i;
    seg @ i -> < j > seg
    {
      I
    }
    @ i /\ j
  };
  unitEqI : Path U Unit I = isoPath Unit I fromUnit toUnit fromUnitK toUnitK;
  propI : prop I = subst U prop Unit I unitEqI propUnit;
  setI : set I = subst U set Unit I unitEqI setUnit;
  T : U = Path I zero zero;
  p0 : T = refl I zero;
  test : T = propI zero zero
}
