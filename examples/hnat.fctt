module hnat where
{
  import nat;
  import equiv hdata hnat = nzero | nsuc (n : hnat);
  test0 : hnat = comp (< _ > hnat) nzero [];
  test1 : nat = comp (< _ > nat) zero [];
  test2 : Path hnat nzero comp (< _ > hnat) nzero [] = fill (< _ > hnat) nzero [];
  toNat : hnat -> nat = split
  {
    nzero -> zero;
    nsuc n -> suc (toNat n)
  };
  fromNat : nat -> hnat = split
  {
    zero -> nzero;
    suc n -> nsuc (fromNat n)
  };
  toNatK : (n : hnat) -> Path hnat (fromNat (toNat n)) n = split
  {
    nzero -> < _ > nzero;
    nsuc n -> < i > nsuc (toNatK n @ i)
  };
  fromNatK : (n : nat) -> Path nat (toNat (fromNat n)) n = split
  {
    zero -> < _ > zero;
    suc n -> < i > suc (fromNatK n @ i)
  };
  hnatEqNat : Path U hnat nat = isoPath hnat nat toNat fromNat fromNatK toNatK;
  test3 : nat = trans hnat nat hnatEqNat test0;
  test4 : hnat = trans nat hnat (< i > hnatEqNat @ - i) zero;
  test5 : hnat = trans hnat hnat (compPath U hnat nat hnat hnatEqNat (< i > hnatEqNat @ - i)) nzero;
  hnatSet : set hnat = subst U set nat hnat (< i > hnatEqNat @ - i) natSet
}
