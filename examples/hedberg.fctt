module hedberg where
{
  import prelude hedbergLemma (A : U) (a b : A) (f : (x : A) -> Path A a x -> Path A a x) (p : Path A a b) : Square A a a a b (refl A a) p (f a (refl A a)) (f b p) = comp (< i > Square A a a a (p @ i) (< _ > a) (< j > p @ i /\ j) (f a (< _ > a)) (f (p @ i) (< j > p @ i /\ j))) (< i > f a (< _ > a)) [];
  hedbergStable (A : U) (a b : A) (h : (x : A) -> stable (Path A a x)) (p q : Path A a b) : Path (Path A a b) p q = < j i > comp (< _ > A) a [(j = 0) -> rem2 @ i, (j = 1) -> rem3 @ i, (i = 0) -> r, (i = 1) -> rem4 @ j] where
  {
    ra : Path A a a = < _ > a;
    rem1 (x : A) : exConst (Path A a x) = stableConst (Path A a x) (h x);
    f (x : A) : Path A a x -> Path A a x = (rem1 x) .1;
    fIsConst (x : A) : const (Path A a x) (f x) = (rem1 x) .2;
    rem4 : Square A a a b b ra (refl A b) (f b p) (f b q) = fIsConst b p q;
    r : Path A a a = f a ra;
    rem2 : Square A a a a b ra p r (f b p) = hedbergLemma A a b f p;
    rem3 : Square A a a a b ra q r (f b q) = hedbergLemma A a b f q
  };
  hedbergS (A : U) (h : (a x : A) -> stable (Path A a x)) : set A = \ (a b : A) -> hedbergStable A a b (h a);
  hedberg (A : U) (h : discrete A) : set A = \ (a b : A) -> hedbergStable A a b (\ (b : A) -> decStable (Path A a b) (h a b))
}
