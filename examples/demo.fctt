module demo where
{
  idfun (A : U) (a : A) : A = a;
  data bool = false | true;
  not : bool -> bool = split
  {
    false -> true;
    true -> false
  };
  Path (A : U) (a b : A) : U = PathP (< i > A) a b;
  refl (A : U) (a : A) : Path A a a = < i > a;
  face0 (A : U) (a b : A) (p : Path A a b) : Path A a a = refl A (p @ 0);
  face1 (A : U) (a b : A) (p : Path A a b) : Path A b b = refl A (p @ 1);
  cong (A B : U) (f : A -> B) (a b : A) (p : Path A a b) : Path B (f a) (f b) = < i > f (p @ i);
  funExt (A : U) (B : A -> U) (f g : (x : A) -> B x) (p : (x : A) -> Path (B x) (f x) (g x)) : Path ((y : A) -> B y) f g = < i > \ (a : A) -> p a @ i;
  sym (A : U) (a b : A) (p : Path A a b) : Path A b a = < i > p @ - i;
  symK (A : U) (a b : A) (p : Path A a b) : Path (Path A a b) p p = refl (Path A a b) (sym A b a (sym A a b p));
  singl (A : U) (a : A) : U = (x : A) * Path A a x;
  contrSingl (A : U) (a b : A) (p : Path A a b) : Path (singl A a) (a, refl A a) (b, p) = < i > (p @ i, < j > p @ i /\ j);
  testConj (A : U) (a b : A) (p : Path A a b) : Path A a a = < i > p @ i /\ - i;
  testDisj (A : U) (a b : A) (p : Path A a b) : Path A b b = < i > p @ i \/ - i;
  trans (A : U) (a b c : A) (p : Path A a b) (q : Path A b c) : Path A a c = < i > comp (< _ > A) (p @ i) [(i = 0) -> < j > a, (i = 1) -> q];
  kan (A : U) (a b c d : A) (p : Path A a b) (q : Path A a c) (r : Path A b d) : Path A c d = < i > comp (< _ > A) (p @ i) [(i = 0) -> q, (i = 1) -> r];
  prop (A : U) : U = (a b : A) -> Path A a b;
  set (A : U) : U = (a b : A) -> prop (Path A a b);
  propSet (A : U) (h : prop A) : set A = \ (a b : A) (p q : Path A a b) -> < i j > comp (< _ > A) a [(j = 0) -> h a a, (j = 1) -> h a b, (i = 0) -> h a (p @ j), (i = 1) -> h a (q @ j)];
  propIsProp (A : U) : prop (prop A) = \ (f g : prop A) -> < i > \ (a b : A) -> propSet A f a b (f a b) (g a b) @ i;
  Square (A : U) (a0 a1 b0 b1 : A) (u : Path A a0 a1) (v : Path A b0 b1) (r0 : Path A a0 b0) (r1 : Path A a1 b1) : U = PathP (< i > PathP (< j > A) (u @ i) (v @ i)) r0 r1;
  constSquare (A : U) (a : A) (p : Path A a a) : Square A a a a a p p p p = < i j > comp (< _ > A) a [(i = 0) -> < k > p @ j \/ - k, (i = 1) -> < k > p @ j /\ k, (j = 0) -> < k > p @ i \/ - k, (j = 1) -> < k > p @ i /\ k];
  data nat = zero | suc (n : nat);
  one : nat = suc zero;
  two : nat = suc one;
  add (a : nat) : nat -> nat = split
  {
    zero -> a;
    suc b -> suc (add a b)
  };
  addZero : (a : nat) -> Path nat (add zero a) a = split
  {
    zero -> < i > zero;
    suc a' -> < i > suc (addZero a' @ i)
  };
  addSuc (a : nat) : (b : nat) -> Path nat (add (suc a) b) (suc (add a b)) = split
  {
    zero -> < i > suc a;
    suc b' -> < i > suc (addSuc a b' @ i)
  };
  addCom (a : nat) : (b : nat) -> Path nat (add a b) (add b a) = split
  {
    zero -> < i > addZero a @ - i;
    suc b' -> < i > comp (< _ > nat) (suc (addCom a b' @ i)) [(i = 0) -> < j > suc (add a b'), (i = 1) -> < j > addSuc b' a @ - j]
  };
  addAssoc (a b : nat) : (c : nat) -> Path nat (add a (add b c)) (add (add a b) c) = split
  {
    zero -> < i > add a b;
    suc c' -> < i > suc (addAssoc a b c' @ i)
  };
  subst (A : U) (P : A -> U) (a b : A) (p : Path A a b) (e : P a) : P b = transport (cong A U P a b p) e;
  J (A : U) (a : A) (C : (x : A) -> Path A a x -> U) (d : C a (refl A a)) (x : A) (p : Path A a x) : C x p = subst (singl A a) T (a, refl A a) (x, p) (contrSingl A a x p) d where
  {
    T (bp : singl A a) : U = C bp .1 bp .2
  }
}
