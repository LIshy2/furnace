module ordinal where
{
  import prelude data nat = zero | succ (n : nat);
  data ord = zero_ | succ_ (n : ord) | lim_ (f : nat -> ord);
  data ord2 = zero__ | succ__ (n : ord2) | lim__ (f : nat -> ord2) | lim2 (f : ord -> ord2);
  inj0 : nat -> ord = split
  {
    zero -> zero_;
    succ n -> succ_ (inj0 n)
  };
  G1 : ord -> nat -> nat = split
  {
    zero_ -> \ (x : nat) -> zero;
    succ_ z -> \ (x : nat) -> succ (G1 z x);
    lim_ f -> \ (x : nat) -> G1 (f x) x
  };
  G2 : ord2 -> nat -> ord = split
  {
    zero__ -> \ (x : nat) -> zero_;
    succ__ z -> \ (x : nat) -> succ_ (G2 z x);
    lim__ f -> \ (x : nat) -> G2 (f x) x;
    lim2 f -> \ (x : nat) -> lim_ (\ (n : nat) -> G2 (f (inj0 n)) x)
  };
  and (A B : U) : U = (_ : A) * B;
  O2 (n : nat) : ord2 -> U = split
  {
    zero__ -> Unit;
    succ__ z -> O2 n z;
    lim__ f -> (p : nat) -> O2 n (f p);
    lim2 f -> (x : ord) -> and (O2 n (f x)) (Path ord (G2 (f x) n) (G2 (f (inj0 (G1 x n))) n))
  };
  inj12 : ord -> ord2 = split
  {
    zero_ -> zero__;
    succ_ z -> succ__ (inj12 z);
    lim_ f -> lim__ (\ (n : nat) -> inj12 (f n))
  };
  H1 : ord -> nat -> nat = split
  {
    zero_ -> \ (x : nat) -> x;
    succ_ z -> \ (x : nat) -> H1 z (succ x);
    lim_ f -> \ (x : nat) -> H1 (f x) x
  };
  H2 : ord2 -> ord -> ord = split
  {
    zero__ -> \ (x : ord) -> x;
    succ__ z -> \ (x : ord) -> H2 z (succ_ x);
    lim__ f -> \ (x : ord) -> lim_ (\ (n : nat) -> H2 (f n) x);
    lim2 f -> \ (x : ord) -> H2 (f x) x
  };
  collapsing (n : nat) : (x : ord2) (y : ord) -> O2 n x -> Path nat (G1 (H2 x y) n) (H1 (G2 x n) (G1 y n)) = split
  {
    zero__ -> \ (y : ord) (h : O2 n zero__) -> < i > G1 y n;
    succ__ z -> \ (y : ord) (h : O2 n (succ__ z)) -> collapsing n z (succ_ y) h;
    lim__ f -> \ (y : ord) (h : O2 n (lim__ f)) -> collapsing n (f n) y (h n);
    lim2 f -> \ (y : ord) (h : O2 n (lim2 f)) -> let
    {
      rem : Path ord (G2 (f y) n) (G2 (f (inj0 (G1 y n))) n) = (h y) .2;
      rem1 : Path nat (G1 (H2 (f y) y) n) (H1 (G2 (f y) n) (G1 y n)) = collapsing n (f y) y (h y) .1
    }
    in comp (< i > Path nat (G1 (H2 (f y) y) n) (H1 (rem @ i) (G1 y n))) rem1 []
  };
  omega : ord = lim_ inj0;
  omega1 : ord2 = lim2 inj12;
  lemOmega1 (n : nat) : O2 n omega1 = \ (x : ord) -> (rem x, rem1 x) where
  {
    rem : (x : ord) -> O2 n (inj12 x) = split
    {
      zero_ -> tt;
      succ_ z -> rem z;
      lim_ f -> \ (p : nat) -> rem (f p)
    };
    rem1 : (x : ord) -> Path ord (G2 (inj12 x) n) (G2 (inj12 (inj0 (G1 x n))) n) = split
    {
      zero_ -> < i > zero_;
      succ_ z -> < i > succ_ (rem1 z @ i);
      lim_ f -> rem1 (f n)
    }
  };
  corr1 (n : nat) : Path nat (G1 (H2 omega1 omega) n) (H1 (G2 omega1 n) (G1 omega n)) = collapsing n omega1 omega (lemOmega1 n);
  lem : (n p : nat) -> Path nat (G1 (inj0 n) p) n = split
  {
    zero -> \ (p : nat) -> < i > zero;
    succ q -> \ (p : nat) -> < i > succ (lem q p @ i)
  };
  lem1 (n : nat) : Path nat (G1 omega n) n = lem n n;
  lem2 : (n p : nat) -> Path ord (G2 (inj12 (inj0 n)) p) (inj0 n) = split
  {
    zero -> \ (p : nat) -> < i > inj0 zero;
    succ q -> \ (p : nat) -> < i > succ_ (lem2 q p @ i)
  };
  test (n : nat) : ord = G2 omega1 n;
  lem3 (n : nat) : Path ord (G2 (inj12 (inj0 n)) n) (inj0 n) = lem2 n n;
  lem4 (n : nat) : Path nat (H1 (G2 omega1 n) n) (H1 omega n) = < i > H1 (lem3 n @ i) n;
  corr2 : Path (nat -> nat) (G1 (H2 omega1 omega)) (H1 omega) = < i > \ (n : nat) -> comp (< _ > nat) (H1 (G2 omega1 n) (lem1 n @ i)) [(i = 0) -> < j > corr1 n @ - j, (i = 1) -> lem4 n]
}
