module retract where
{
  import prelude section (A B : U) (f : A -> B) (g : B -> A) : U = (b : B) -> Path B (f (g b)) b;
  retract (A B : U) (f : A -> B) (g : B -> A) : U = (a : A) -> Path A (g (f a)) a;
  lemRetract (A B : U) (f : A -> B) (g : B -> A) (rfg : retract A B f g) (x y : A) : Path A (g (f x)) (g (f y)) -> Path A x y = compUp A (g (f x)) x (g (f y)) y (rfg x) (rfg y);
  retractProp (A B : U) (f : A -> B) (g : B -> A) (rfg : retract A B f g) (pB : prop B) (x y : A) : Path A x y = lemRetract A B f g rfg x y (< i > g (pB (f x) (f y) @ i));
  retractInv (A B : U) (f : A -> B) (g : B -> A) (rfg : retract A B f g) (x y : A) (q : Path B (f x) (f y)) : Path A x y = compUp A (g (f x)) x (g (f y)) y (rfg x) (rfg y) (< i > g (q @ i))
}
