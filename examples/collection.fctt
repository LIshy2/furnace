module collection where
{
  import univalence;
  import sigma;
  import pi setFun (A B : U) (sB : set B) : set (A -> B) = setPi A (\ (x : A) -> B) (\ (x : A) -> sB);
  eqEquivFst (A B : U) : (t u : equiv A B) -> Path U (Path (equiv A B) t u) (Path (A -> B) t .1 u .1) = lemSigProp (A -> B) (isEquiv A B) (propIsEquiv A B);
  setPath (A B : U) (sB : set B) : set (Path U A B) = substInv U set (Path U A B) (equiv A B) (corrUniv A B) (rem A B sB) where
  {
    rem (A B : U) (sB : set B) (t u : equiv A B) : prop (Path (equiv A B) t u) = substInv U prop (Path (equiv A B) t u) (Path (A -> B) t .1 u .1) (eqEquivFst A B t u) (setFun A B sB t .1 u .1)
  };
  groupoidSET : groupoid SET = \ (A B : SET) -> let
  {
    rem : set (Path U A .1 B .1) = setPath A .1 B .1 B .2;
    rem1 : Path U (Path SET A B) (Path U A .1 B .1) = lemSigProp U set setIsProp A B
  }
  in substInv U set (Path SET A B) (Path U A .1 B .1) rem1 rem
}
